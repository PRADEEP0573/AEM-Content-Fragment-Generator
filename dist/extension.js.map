{"version":3,"file":"extension.js","mappings":"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","sources":[".././extension.js","../external commonjs \"vscode\"","../external node-commonjs \"fs\"","../external node-commonjs \"path\"","../webpack/bootstrap","../webpack/startup"],"sourcesContent":["const vscode = require('vscode');\nconst path = require('path');\nconst fs = require('fs');\n\nlet currentPanel = undefined;\n\nfunction activate(context) {\n    let disposable = vscode.commands.registerCommand('aem-cf-builder.createModel', async (uri) => {\n        if (!uri) {\n            vscode.window.showErrorMessage('Please right-click on a folder in the Explorer to use this command');\n            return;\n        }\n\n        // Get configuration with default values\n        const config = vscode.workspace.getConfiguration('aemCfGenerator');\n        const fieldTypes = config.get('fieldTypes', [\n            { label: 'Single Line Text', value: 'text-single' },\n            { label: 'Multi-line Text', value: 'text-multi' },\n            { label: 'Number', value: 'number' },\n            { label: 'Boolean', value: 'boolean' },\n            { label: 'Date/Time', value: 'datetime' },\n            { label: 'Enumeration', value: 'enumeration' }\n        ]);\n        const validationTypes = config.get('validationTypes', [\n            { label: 'Required', value: 'required' },\n            { label: 'Optional', value: 'optional' }\n        ]);\n        const defaultFields = config.get('defaultFields', []);\n\n        currentPanel = vscode.window.createWebviewPanel(\n            'aemCfBuilder',\n            'AEM Content Fragment Builder',\n            vscode.ViewColumn.Beside,\n            {\n                enableScripts: true,\n                retainContextWhenHidden: true,\n                localResourceRoots: [\n                    vscode.Uri.file(path.join(context.extensionPath, 'images')),\n                    vscode.Uri.file(path.join(context.extensionPath, 'media'))\n                ]\n            }\n        );\n\n        // Get the URI for the background image\n        const bgImageUri = currentPanel.webview.asWebviewUri(\n            vscode.Uri.file(path.join(context.extensionPath, 'images', 'PADDE.png'))\n        );\n\n        currentPanel.webview.html = getWebviewContent(fieldTypes, validationTypes, defaultFields, bgImageUri);\n\n        currentPanel.webview.onDidReceiveMessage(\n            async (message) => {\n                try {\n                    switch (message.command) {\n                        case 'generate':\n                            await generateContentFragment(message.data, uri);\n                            break;\n                        case 'preview':\n                            updatePreview(message.data);\n                            break;\n                        case 'validate':\n                            const validation = validateInput(message.data);\n                            if (!validation.isValid) {\n                                currentPanel.webview.postMessage({\n                                    command: 'validationError',\n                                    message: validation.message\n                                });\n                            } else {\n                                currentPanel.webview.postMessage({\n                                    command: 'validationSuccess'\n                                });\n                            }\n                            break;\n                        default:\n                            console.warn('Unknown message command:', message.command);\n                    }\n                } catch (error) {\n                    vscode.window.showErrorMessage(`Error: ${error.message}`);\n                    console.error(error);\n                }\n            },\n            undefined,\n            context.subscriptions\n        );\n\n        currentPanel.onDidDispose(\n            () => {\n                currentPanel = undefined;\n            },\n            null,\n            context.subscriptions\n        );\n    });\n\n    context.subscriptions.push(disposable);\n}\n\nfunction validateInput(data) {\n    if (!data.name) {\n        return {\n            isValid: false,\n            message: 'Model name is required'\n        };\n    }\n\n    if (!/^[a-z0-9-_]+$/i.test(data.name)) {\n        return {\n            isValid: false,\n            message: 'Model name can only contain letters, numbers, hyphens and underscores'\n        };\n    }\n\n    if (!data.fields || data.fields.length === 0) {\n        return {\n            isValid: false,\n            message: 'At least one field is required'\n        };\n    }\n\n    for (const field of data.fields) {\n        if (!field.name || !field.type) {\n            return {\n                isValid: false,\n                message: 'All fields must have a name and type'\n            };\n        }\n        \n        if (!/^[a-z][a-z0-9-_]*$/i.test(field.name)) {\n            return {\n                isValid: false,\n                message: `Field name '${field.name}' must start with a letter and contain only letters, numbers, hyphens or underscores`\n            };\n        }\n    }\n\n    return { isValid: true };\n}\n\nasync function generateContentFragment(data, uri) {\n    try {\n        const basePath = uri.fsPath;\n        const modelName = data.name.toLowerCase().replace(/\\s+/g, '-');\n        const projectName = data.projectName || 'myproject';\n        const folderName = data.folderName || 'CF Folder Name';\n\n        // Validate project name\n        if (!/^[a-z0-9-]+$/.test(projectName)) {\n            vscode.window.showErrorMessage('Project name can only contain lowercase letters, numbers, and hyphens');\n            return;\n        }\n\n        // Validate folder name\n        if (!folderName || folderName.trim().length === 0) {\n            vscode.window.showErrorMessage('Folder name cannot be empty');\n            return;\n        }\n\n        // Create the complete folder structure\n        const rootFolder = path.join(basePath, folderName);\n        const settingsPath = path.join(rootFolder, 'settings');\n        const damPath = path.join(settingsPath, 'dam');\n        const cfmPath = path.join(damPath, 'cfm');\n        const modelsPath = path.join(cfmPath, 'models');\n        const modelPath = path.join(modelsPath, modelName);\n\n        // Create all directories\n        fs.mkdirSync(modelPath, { recursive: true });\n\n        // Create all .content.xml files\n        // 1. Root .content.xml\n        const rootContent = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<jcr:root xmlns:sling=\"http://sling.apache.org/jcr/sling/1.0\" \n          xmlns:jcr=\"http://www.jcp.org/jcr/1.0\"\n          jcr:title=\"${escapeXml(data.name)}\"\n          jcr:primaryType=\"sling:Folder\"/>`;\n\n        // 2. settings/.content.xml\n        const settingsContent = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<jcr:root xmlns:sling=\"http://sling.apache.org/jcr/sling/1.0\" \n          xmlns:jcr=\"http://www.jcp.org/jcr/1.0\"\n          jcr:primaryType=\"sling:Folder\"\n          sling:resourceType=\"sling:Folder\"/>`;\n\n        // 3. settings/dam/.content.xml\n        const damContent = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<jcr:root xmlns:sling=\"http://sling.apache.org/jcr/sling/1.0\" \n          xmlns:jcr=\"http://www.jcp.org/jcr/1.0\"\n          jcr:primaryType=\"cq:Page\">\n    <cfm/>\n</jcr:root>`;\n\n        // 4. settings/dam/cfm/.content.xml\n        const cfmContent = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<jcr:root xmlns:sling=\"http://sling.apache.org/jcr/sling/1.0\" \n          xmlns:jcr=\"http://www.jcp.org/jcr/1.0\"\n          jcr:primaryType=\"cq:Page\">\n    <models/>\n</jcr:root>`;\n\n        // 5. settings/dam/cfm/models/.content.xml\n        const modelsContent = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<jcr:root xmlns:sling=\"http://sling.apache.org/jcr/sling/1.0\" \n          xmlns:jcr=\"http://www.jcp.org/jcr/1.0\"\n          jcr:primaryType=\"cq:Page\">\n    <${modelName}/>\n</jcr:root>`;\n\n        // 6. settings/dam/cfm/models/[model-name]/.content.xml\n        const modelContent = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<jcr:root xmlns:sling=\"http://sling.apache.org/jcr/sling/1.0\"\n xmlns:cq=\"http://www.day.com/jcr/cq/1.0\" \n xmlns:jcr=\"http://www.jcp.org/jcr/1.0\" \n xmlns:nt=\"http://www.jcp.org/jcr/nt/1.0\"\n xmlns:granite=\"http://www.adobe.com/jcr/granite/1.0\"\n    jcr:primaryType=\"cq:Template\"\n    allowedPaths=\"[/content/entities(/.*)?]\"\n    ranking=\"{Long}100\">\n    <jcr:content\n        cq:lastModified=\"{Date}${new Date().toISOString()}\"\n        cq:lastModifiedBy=\"{String}admin\"\n        cq:scaffolding=\"/conf/${projectName}/settings/dam/cfm/models/${modelName}/jcr:content/model\"\n        cq:templateType=\"/libs/settings/dam/cfm/model-types/fragment\"\n        jcr:primaryType=\"cq:PageContent\"\n        jcr:title=\"${escapeXml(data.name)}\"\n        sling:resourceSuperType=\"dam/cfm/models/console/components/data/entity\"\n        sling:resourceType=\"dam/cfm/models/console/components/data/entity/default\">\n        <model\n            cq:targetPath=\"/content/entities\"\n            jcr:primaryType=\"cq:PageContent\"\n            sling:resourceType=\"wcm/scaffolding/components/scaffolding\"\n            dataTypesConfig=\"/mnt/overlay/settings/dam/cfm/models/formbuilderconfig/datatypes\"\n            maxGeneratedOrder=\"20\">\n            <cq:dialog\n                jcr:primaryType=\"nt:unstructured\"\n                sling:resourceType=\"cq/gui/components/authoring/dialog\">\n                <content\n                    jcr:lastModified=\"{Date}${new Date().toISOString()}\"\n                    jcr:lastModifiedBy=\"admin\"\n                    jcr:primaryType=\"nt:unstructured\"\n                    sling:resourceType=\"granite/ui/components/coral/foundation/fixedcolumns\">\n                    <items\n                        jcr:primaryType=\"nt:unstructured\"\n                        maxGeneratedOrder=\"22\">\n                        ${generateFieldsXml(data.fields)}\n                    </items>\n                </content>\n            </cq:dialog>\n        </model>\n    </jcr:content>\n</jcr:root>`;\n\n        // Write all files\n        fs.writeFileSync(path.join(rootFolder, '.content.xml'), rootContent);\n        fs.writeFileSync(path.join(settingsPath, '.content.xml'), settingsContent);\n        fs.writeFileSync(path.join(damPath, '.content.xml'), damContent);\n        fs.writeFileSync(path.join(cfmPath, '.content.xml'), cfmContent);\n        fs.writeFileSync(path.join(modelsPath, '.content.xml'), modelsContent);\n        fs.writeFileSync(path.join(modelPath, '.content.xml'), modelContent);\n\n        vscode.window.showInformationMessage(\n            `Content Fragment Model '${data.name}' created successfully at: ${modelPath}`\n        );\n\n        // Open the generated files\n        const rootUri = vscode.Uri.file(path.join(rootFolder, '.content.xml'));\n        const modelUri = vscode.Uri.file(path.join(modelPath, '.content.xml'));\n        \n        await vscode.window.showTextDocument(rootUri);\n        await vscode.window.showTextDocument(modelUri, { preview: false, viewColumn: vscode.ViewColumn.Beside });\n\n    } catch (error) {\n        vscode.window.showErrorMessage(`Error creating Content Fragment Model: ${error.message}`);\n        console.error('Error in generateContentFragment:', error);\n    }\n}\n\nfunction generateFieldsXml(fields) {\n    return fields.map((field, index) => {\n        const fieldId = `_x003${index}_${Date.now()}`;\n        const commonAttrs = [\n            `jcr:primaryType=\"nt:unstructured\"`,\n            `fieldLabel=\"${escapeXml(field.label || field.name)}\"`,\n            `fieldDescription=\"${escapeXml(field.description || '')}\"`,\n            `name=\"${escapeXml(field.name)}\"`,\n            `listOrder=\"${index + 1}\"`,\n            `metaType=\"${field.type}\"`,\n            `renderReadOnly=\"false\"`,\n            `showEmptyInReadOnly=\"true\"`,\n            `required=\"${field.required ? 'on' : 'off'}\"`\n        ];\n\n        let fieldAttrs = [...commonAttrs];\n        \n        // Add type-specific attributes\n        switch(field.type) {\n            case 'text-single':\n                fieldAttrs.push(\n                    `sling:resourceType=\"granite/ui/components/coral/foundation/form/textfield\"`,\n                    `emptyText=\"${escapeXml(field.placeholder || '')}\"`,\n                    `maxlength=\"${field.maxLength || '255'}\"`,\n                    `valueType=\"string\"`,\n                    `value=\"${escapeXml(field.value || '')}\"`\n                );\n                break;\n\n            case 'text-multi':\n                fieldAttrs.push(\n                    `sling:resourceType=\"dam/cfm/admin/components/authoring/contenteditor/multieditor\"`,\n                    `default-mime-type=\"text/html\"`,\n                    `valueType=\"string\"`\n                );\n                break;\n\n            case 'number':\n                fieldAttrs.push(\n                    `sling:resourceType=\"granite/ui/components/coral/foundation/form/numberfield\"`,\n                    `emptyText=\"${escapeXml(field.placeholder || '')}\"`,\n                    `step=\"${field.step || '1'}\"`,\n                    `typeHint=\"${field.numberType || 'long'}\"`,\n                    `valueType=\"${field.numberType || 'long'}\"`,\n                    `value=\"${field.value || '0'}\"`\n                );\n                break;\n\n            case 'boolean':\n                fieldAttrs.push(\n                    `sling:resourceType=\"granite/ui/components/coral/foundation/form/checkbox\"`,\n                    `checked=\"{Boolean}${field.checked || 'false'}\"`,\n                    `text=\"${escapeXml(field.text || field.label || field.name)}\"`,\n                    `valueType=\"boolean\"`\n                );\n                break;\n\n            case 'date':\n                fieldAttrs.push(\n                    `sling:resourceType=\"granite/ui/components/coral/foundation/form/datepicker\"`,\n                    `displayedFormat=\"YYYY-MM-DD HH:mm\"`,\n                    `emptyText=\"YYYY-MM-DD HH:mm\"`,\n                    `type=\"datetime\"`,\n                    `valueFormat=\"YYYY-MM-DD[T]HH:mm:ss.000Z\"`,\n                    `valueType=\"calendar\"`,\n                    `value=\"${field.value ? `{Date}${field.value}` : ''}\"`,\n                    `>`,\n                    `<granite:data jcr:primaryType=\"nt:unstructured\" typeHint=\"Date\"/>`\n                );\n                return `<${fieldId} ${fieldAttrs.join(' ')}</${fieldId}>`;\n\n            case 'enumeration':\n                fieldAttrs.push(\n                    `sling:resourceType=\"granite/ui/components/coral/foundation/form/select\"`,\n                    `emptyOption=\"{Boolean}true\"`,\n                    `options=\"${escapeXml(field.options ? field.options.join(',') : 'Option 1,Option 2')}\"`,\n                    `valueType=\"string\"`,\n                    `>`,\n                    `<datasource jcr:primaryType=\"nt:unstructured\"`,\n                    `sling:resourceType=\"dam/cfm/admin/components/datasources/optionrenderer\"`,\n                    `variant=\"default\"/>`\n                );\n                return `<${fieldId} ${fieldAttrs.join(' ')}</${fieldId}>`;\n\n            default:\n                fieldAttrs.push(\n                    `sling:resourceType=\"granite/ui/components/coral/foundation/form/textfield\"`,\n                    `valueType=\"string\"`\n                );\n        }\n\n        return `<${fieldId} ${fieldAttrs.join(' ')}/>`;\n    }).join('\\n        ');\n}\n\nfunction getWebviewContent(fieldTypes = [], validationTypes = [], defaultFields = [], bgImageUri) {\n    // Generate field type options\n    const fieldTypeOptions = fieldTypes.map(type => \n        `<option value=\"${type.value}\">${type.label}</option>`\n    ).join('\\n');\n\n    // Generate validation type options\n    const validationTypeOptions = validationTypes.map(validation => \n        `<option value=\"${validation.value}\">${validation.label}</option>`\n    ).join('\\n');\n\n    // Generate default fields HTML\n    const defaultFieldsHtml = defaultFields\n        .map((field, index) => generateFieldHtml(field, index, fieldTypes, validationTypes))\n        .join('');\n\n    // Generate the complete HTML content\n    return `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>AEM Content Fragment Builder</title>\n    <style>\n        /* Modern Color Scheme */\n        :root {\n            --primary: #7c3aed;\n            --primary-light: #a78bfa;\n            --secondary: #10b981;\n            --accent: #f59e0b;\n            --danger: #ef4444;\n            --success: #10b981;\n            --text: #1f2937;\n            --text-light: #6b7280;\n            --bg: #f9fafb;\n            --card-bg: #ffffff;\n            --border: #e5e7eb;\n            \n            /* Spacing */\n            --spacing-xs: 4px;\n            --spacing-sm: 8px;\n            --spacing-md: 16px;\n            --spacing-lg: 24px;\n            --spacing-xl: 32px;\n            \n            /* Border Radius */\n            --radius-sm: 4px;\n            --radius-md: 8px;\n            --radius-lg: 12px;\n            \n            /* Shadows */\n            --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\n            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n            \n            /* Transitions */\n            --transition-fast: all 0.15s ease-in-out;\n            --transition-normal: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n            --transition-slow: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);\n        }\n\n        /* Base Styles */\n        body {\n            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;\n            font-size: 14px;\n            line-height: 1.6;\n            color: var(--text);\n            background: url('${bgImageUri}') no-repeat center center fixed;\n            background-size: cover;\n            background-color: #f9fafb;\n            margin: 0;\n            padding: 0;\n            min-height: 100vh;\n            -webkit-font-smoothing: antialiased;\n            -moz-osx-font-smoothing: grayscale;\n        }\n\n        /* Container */\n        .container {\n            max-width: 1000px;\n            margin: 0 auto;\n            padding: var(--spacing-xl);\n            animation: fadeIn 0.6s ease-out;\n        }\n\n        /* Card */\n        .card {\n            background: var(--card-bg);\n            border-radius: var(--radius-lg);\n            box-shadow: var(--shadow-lg);\n            padding: var(--spacing-xl);\n            margin-bottom: var(--spacing-xl);\n            border: 1px solid var(--border);\n            transition: var(--transition-normal);\n        }\n\n        .card:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n        }\n\n        /* Form Elements */\n        .form-group {\n            margin-bottom: var(--spacing-lg);\n        }\n\n        label {\n            display: block;\n            margin-bottom: var(--spacing-sm);\n            font-weight: 600;\n            color: var(--text);\n            font-size: 13px;\n            text-transform: uppercase;\n            letter-spacing: 0.05em;\n        }\n\n        input[type=\"text\"],\n        select {\n            width: 100%;\n            padding: 10px 12px;\n            background-color: var(--card-bg);\n            color: var(--text);\n            border: 2px solid var(--border);\n            border-radius: var(--radius-md);\n            font-family: inherit;\n            font-size: 14px;\n            transition: var(--transition-fast);\n        }\n\n        input[type=\"text\"]:focus,\n        select:focus {\n            outline: none;\n            border-color: var(--primary);\n            box-shadow: 0 0 0 3px rgba(124, 58, 237, 0.1);\n        }\n\n        /* Buttons */\n        .btn {\n            display: inline-flex;\n            align-items: center;\n            justify-content: center;\n            padding: 10px 16px;\n            background: linear-gradient(135deg, var(--primary) 0%, var(--primary-light) 100%);\n            color: white;\n            border: none;\n            border-radius: var(--radius-md);\n            cursor: pointer;\n            font-family: inherit;\n            font-size: 14px;\n            font-weight: 500;\n            transition: var(--transition-normal);\n            box-shadow: var(--shadow-sm);\n        }\n\n        .btn:hover {\n            transform: translateY(-1px);\n            box-shadow: var(--shadow-md);\n            background: linear-gradient(135deg, var(--primary) 0%, var(--primary-light) 100%);\n        }\n\n        .btn:active {\n            transform: translateY(0);\n        }\n\n        .btn-remove {\n            background: linear-gradient(135deg, #ef4444 0%, #f87171 100%);\n        }\n\n        .btn-secondary {\n            background: var(--bg);\n            color: var(--text);\n            border: 1px solid var(--border);\n        }\n\n        /* Field Rows */\n        .field-row {\n            display: flex;\n            align-items: center;\n            gap: var(--spacing-md);\n            margin-bottom: var(--spacing-sm);\n            padding: var(--spacing-md);\n            background: var(--card-bg);\n            border-radius: var(--radius-md);\n            border: 1px solid var(--border);\n            transition: var(--transition-normal);\n            animation: slideIn 0.3s ease-out;\n        }\n\n        .field-row:hover {\n            border-color: var(--primary);\n            box-shadow: var(--shadow-sm);\n        }\n\n        .field-name { flex: 2; }\n        .field-type { flex: 2; }\n        .field-validation { flex: 1.5; }\n        .field-default { flex: 1.5; }\n\n        /* Error Message */\n        #error-message {\n            color: #b91c1c;\n            background-color: #fef2f2;\n            border-left: 4px solid #dc2626;\n            padding: 12px 16px;\n            margin: 0 0 24px 0;\n            border-radius: 4px;\n            display: none;\n            font-size: 14px;\n            line-height: 1.5;\n            animation: fadeIn 0.3s ease-out;\n        }\n\n        /* Preview Section */\n        #preview-container {\n            margin-top: var(--spacing-xl);\n            display: none;\n            animation: fadeIn 0.6s ease-out;\n        }\n\n        #preview-content {\n            background: var(--bg);\n            padding: var(--spacing-lg);\n            border-radius: var(--radius-md);\n            max-height: 400px;\n            overflow: auto;\n            white-space: pre-wrap;\n            font-family: 'Fira Code', 'Courier New', monospace;\n            font-size: 13px;\n            line-height: 1.5;\n            border: 1px solid var(--border);\n        }\n\n        /* Animations */\n        @keyframes fadeIn {\n            from { opacity: 0; transform: translateY(10px); }\n            to { opacity: 1; transform: translateY(0); }\n        }\n\n        @keyframes slideIn {\n            from { opacity: 0; transform: translateX(-10px); }\n            to { opacity: 1; transform: translateX(0); }\n        }\n\n        /* Utility Classes */\n        .flex {\n            display: flex;\n            gap: var(--spacing-md);\n        }\n\n        .items-center {\n            align-items: center;\n        }\n\n        .justify-between {\n            justify-content: space-between;\n        }\n\n        .mt-4 { margin-top: var(--spacing-md); }\n        .mb-4 { margin-bottom: var(--spacing-md); }\n        .p-4 { padding: var(--spacing-md); }\n\n        /* Responsive Design */\n        @media (max-width: 768px) {\n            :root {\n                --spacing-md: 12px;\n                --spacing-lg: 16px;\n                --spacing-xl: 20px;\n            }\n\n            .container {\n                padding: var(--spacing-md);\n            }\n\n            .form-row {\n                flex-direction: column;\n                gap: var(--spacing-md);\n            }\n\n            .field-row {\n                flex-direction: column;\n                gap: var(--spacing-sm);\n                padding: var(--spacing-md);\n            }\n\n            .field-name,\n            .field-type,\n            .field-validation,\n            .field-default,\n            .field-options-container {\n                width: 100%;\n            }\n\n            .form-actions {\n                flex-direction: column;\n                gap: var(--spacing-sm);\n            }\n\n            .btn {\n                width: 100%;\n                padding: 12px;\n            }\n\n            #preview-content {\n                max-height: 300px;\n                font-size: 12px;\n                padding: var(--spacing-md);\n            }\n        }\n\n        @media (max-width: 480px) {\n            :root {\n                --spacing-sm: 6px;\n                --spacing-md: 10px;\n                --spacing-lg: 14px;\n            }\n\n            .card {\n                padding: var(--spacing-lg);\n                margin-bottom: var(--spacing-lg);\n            }\n\n            h1 {\n                font-size: 1.5rem;\n                margin-bottom: var(--spacing-lg);\n            }\n\n            label {\n                font-size: 12px;\n                margin-bottom: 4px;\n            }\n\n            input[type=\"text\"],\n            select {\n                padding: 8px 10px;\n                font-size: 13px;\n            }\n        }\n    </style>\n    <body>\n        <div class=\"container\">\n            <h1>AEM Content Fragment Generator</h1>\n            <div id=\"error-message\" role=\"alert\"></div>\n            <div class=\"form-row\">\n                <div class=\"form-group\">\n                    <label for=\"projectName\">Project Name</label>\n                    <input type=\"text\" \n                           id=\"projectName\" \n                           placeholder=\"Enter Current Project Name\" \n                           value=\"\"\n                           class=\"form-control\" required />\n                </div>\n            </div>  \n            <div class=\"form-row\">\n                <div class=\"form-group\">\n                    <label for=\"folderName\">CF Folder Name</label>\n                    <input type=\"text\" \n                           id=\"folderName\" \n                           placeholder=\"Enter CF Folder Name\" \n                           value=\"\"\n                           class=\"form-control\" required />\n                </div>\n            </div>\n            <div class=\"form-row\">\n                <div class=\"form-group\">\n                    <label for=\"modelName\">Model Name</label>\n                    <input type=\"text\" \n                           id=\"modelName\" \n                           placeholder=\"Enter CF Model Name\" \n                           class=\"form-control\" required />\n                </div>\n            </div>\n            \n            <div class=\"form-group\">\n                <div class=\"form-group-header\">\n                    <label>Fields</label>\n                    <button id=\"add-field\" class=\"btn\">+ Add Field</button>\n                </div>\n                <div id=\"fields-container\">\n                    ${defaultFieldsHtml}\n                </div>\n            </div>\n            \n            <div class=\"form-actions\">\n                <button id=\"preview\" class=\"btn\">Preview</button>\n                <button id=\"generate\" class=\"btn btn-primary\">Generate</button>\n            </div>\n            \n            <div id=\"preview-container\">\n                <h3>Preview</h3>\n                <pre id=\"preview-content\"></pre>\n            </div>\n        </div>\n\n        <script>\n            const vscode = acquireVsCodeApi();\n            let fieldCounter = ${defaultFields.length};\n            \n            // Add new field\n            document.getElementById('add-field').addEventListener('click', addNewField);\n            \n            // Handle field type change\n            document.addEventListener('change', (e) => {\n                if (e.target.classList.contains('field-type')) {\n                    const fieldRow = e.target.closest('.field-row');\n                    const optionsContainer = fieldRow.querySelector('.field-options-container');\n                    \n                    if (e.target.value === 'enumeration') {\n                        if (!optionsContainer) {\n                            const optionsInput = document.createElement('input');\n                            optionsInput.type = 'text';\n                            optionsInput.className = 'field-options';\n                            optionsInput.placeholder = 'Option 1, Option 2, Option 3';\n                            optionsInput.value = fieldRow.dataset.options || '';\n                            \n                            const container = document.createElement('div');\n                            container.className = 'field-options-container';\n                            const label = document.createElement('label');\n                            label.textContent = 'Options (comma separated)';\n                            container.appendChild(label);\n                            container.appendChild(optionsInput);\n                            \n                            const validationSelect = fieldRow.querySelector('.field-validation');\n                            fieldRow.insertBefore(container, validationSelect.nextSibling);\n                        }\n                    } else if (optionsContainer) {\n                        optionsContainer.remove();\n                    }\n                }\n            });\n            \n            // Remove field\n            document.addEventListener('click', (e) => {\n                if (e.target.classList.contains('remove-field')) {\n                    e.target.closest('.field-row').remove();\n                }\n            });\n            \n            // Preview button\n            document.getElementById('preview').addEventListener('click', () => {\n                const modelData = getModelData();\n                if (modelData) {\n                    document.getElementById('preview-content').textContent = \n                        JSON.stringify(modelData, null, 2);\n                    document.getElementById('preview-container').style.display = 'block';\n                    \n                    // Post message to extension for any additional processing\n                    vscode.postMessage({\n                        command: 'preview',\n                        data: modelData\n                    });\n                }\n            });\n            \n            // Generate button\n            document.getElementById('generate').addEventListener('click', generateModel);\n            \n            // Handle keyboard shortcuts\n            document.addEventListener('keydown', (e) => {\n                if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {\n                    e.preventDefault();\n                    generateModel();\n                }\n            });\n\n            // Handle validation responses\n            window.addEventListener('message', handleMessage);\n\n            function addNewField() {\n                const fieldRow = document.createElement('div');\n                fieldRow.className = 'field-row';\n                fieldRow.dataset.index = fieldCounter++;\n                fieldRow.innerHTML = \\`\n                    <input type=\"text\" \n                           class=\"field-name\" \n                           placeholder=\"Field name\" \n                           required />\n                    <select class=\"field-type\">\n                        ${fieldTypeOptions}\n                    </select>\n                    <select class=\"field-validation\">\n                        ${validationTypeOptions}\n                    </select>\n                    <input type=\"text\" \n                           class=\"field-default\" \n                           placeholder=\"Default value\" />\n                    <button type=\"button\" \n                            class=\"btn btn-remove remove-field\" \n                            title=\"Remove field\">\n                        Remove\n                    </button>\n                \\`;\n                document.getElementById('fields-container').appendChild(fieldRow);\n                fieldRow.querySelector('.field-name').focus();\n            }\n\n            function generateModel() {\n                const modelData = getModelData();\n                if (modelData) {\n                    vscode.postMessage({\n                        command: 'validate',\n                        data: modelData\n                    });\n                }\n            }\n\n            function handleMessage(event) {\n                const message = event.data;\n                const errorEl = document.getElementById('error-message');\n                \n                switch (message.command) {\n                    case 'validationError':\n                        errorEl.textContent = message.message;\n                        errorEl.style.display = 'block';\n                        errorEl.scrollIntoView({ behavior: 'smooth' });\n                        break;\n                        \n                    case 'validationSuccess':\n                        errorEl.style.display = 'none';\n                        vscode.postMessage({\n                            command: 'generate',\n                            data: getModelData()\n                        });\n                        break;\n                }\n            }\n\n            function validateForm() {\n                const projectName = document.getElementById('projectName').value.trim();\n                const folderName = document.getElementById('folderName').value.trim();\n                const modelName = document.getElementById('modelName').value.trim();\n                \n                // Reset error state\n                document.getElementById('error-message').style.display = 'none';\n                \n                // Validate project name\n                if (!projectName) {\n                    showError('Project name is required');\n                    document.getElementById('projectName').focus();\n                    return false;\n                }\n                \n                if (!/^[a-z0-9-]+$/.test(projectName)) {\n                    showError('Project name can only contain lowercase letters, numbers, and hyphens');\n                    document.getElementById('projectName').focus();\n                    return false;\n                }\n                \n                // Validate folder name\n                if (!folderName) {\n                    showError('Folder name is required');\n                    document.getElementById('folderName').focus();\n                    return false;\n                }\n                \n                // Validate model name\n                if (!modelName) {\n                    showError('Model name is required');\n                    document.getElementById('modelName').focus();\n                    return false;\n                }\n                \n                return true;\n            }\n\n            function getModelData() {\n                if (!validateForm()) {\n                    return null;\n                }\n                \n                const modelName = document.getElementById('modelName').value.trim();\n                const projectName = document.getElementById('projectName').value.trim();\n                const folderName = document.getElementById('folderName').value.trim();\n                \n                const fields = Array.from(document.querySelectorAll('.field-row'))\n                    .map(row => {\n                        const name = row.querySelector('.field-name').value.trim();\n                        const type = row.querySelector('.field-type').value;\n                        const validation = row.querySelector('.field-validation').value;\n                        const defaultValue = row.querySelector('.field-default').value.trim();\n                        const optionsInput = row.querySelector('.field-options');\n                        const options = optionsInput ? optionsInput.value.split(',').map(opt => opt.trim()).filter(opt => opt) : [];\n                        \n                        const field = { \n                            name, \n                            type, \n                            validation, \n                            defaultValue,\n                            ...(type === 'enumeration' && { options })\n                        };\n                        \n                        return field;\n                    })\n                    .filter(field => field.name && field.type);\n\n                if (fields.length === 0) {\n                    showError('At least one field is required');\n                    return null;\n                }\n\n                return {\n                    name: modelName,\n                    projectName,\n                    folderName,\n                    fields\n                };\n            }\n\n            function showError(message) {\n                const errorEl = document.getElementById('error-message');\n                errorEl.textContent = message;\n                errorEl.style.display = 'block';\n                errorEl.scrollIntoView({ behavior: 'smooth' });\n            }\n        </script>\n    </body>\n</html>`;\n}\n\n// Helper function to generate field HTML\nfunction generateFieldHtml(field, index, fieldTypes, validationTypes) {\n    const optionsValue = field.options ? field.options.join(', ') : '';\n    \n    return `\n        <div class=\"field-row\" data-index=\"${index}\" ${field.options ? 'data-options=\"' + escapeHtml(optionsValue) + '\"' : ''}>\n            <input type=\"text\" \n                   class=\"field-name\" \n                   value=\"${escapeHtml(field.name || '')}\" \n                   placeholder=\"Field name\" \n                   required />\n            <select class=\"field-type\">\n                ${fieldTypes.map(type => `\n                    <option value=\"${type.value}\" \n                            ${type.value === (field.type || '') ? 'selected' : ''}>\n                        ${type.label}\n                    </option>\n                `).join('')}\n            </select>\n            ${field.type === 'enumeration' ? `\n                <div class=\"field-options-container\">\n                    <label>Options (comma separated)</label>\n                    <input type=\"text\" \n                           class=\"field-options\" \n                           value=\"${escapeHtml(optionsValue)}\" \n                           placeholder=\"Option 1, Option 2, Option 3\" />\n                </div>\n            ` : ''}\n            <select class=\"field-validation\">\n                ${validationTypes.map(validation => `\n                    <option value=\"${validation.value}\" \n                            ${validation.value === (field.validation || '') ? 'selected' : ''}>\n                        ${validation.label}\n                    </option>\n                `).join('')}\n            </select>\n            <input type=\"text\" \n                   class=\"field-default\" \n                   value=\"${escapeHtml(field.defaultValue || '')}\" \n                   placeholder=\"Default value\" />\n            <button type=\"button\" \n                    class=\"btn btn-remove remove-field\" \n                    title=\"Remove field\">\n                Remove\n            </button>\n        </div>\n    `;\n}\n\n// Helper function to escape HTML\nfunction escapeHtml(unsafe) {\n    return unsafe\n        .replace(/&/g, \"&amp;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/\"/g, \"&quot;\")\n        .replace(/'/g, \"&#039;\");\n}\n\nfunction escapeXml(unsafe) {\n    if (!unsafe) return '';\n    return unsafe.toString()\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&apos;');\n}\n\nfunction updatePreview(data) {\n    if (currentPanel) {\n        currentPanel.webview.postMessage({\n            command: 'updatePreview',\n            data: JSON.stringify(data, null, 2)\n        });\n    }\n}\n\nfunction deactivate() {}\n\nmodule.exports = {\n    activate,\n    deactivate\n};","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(252);\n"],"names":["e","t","r","Symbol","n","iterator","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","m","defineProperty","_invoke","enumerable","configurable","writable","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","vscode","require","path","fs","currentPanel","undefined","validateInput","data","name","isValid","message","test","fields","_step","_iterator","_createForOfIteratorHelper","s","field","type","concat","err","generateContentFragment","_x3","_x4","_generateContentFragment","_callee3","uri","basePath","modelName","projectName","folderName","rootFolder","settingsPath","damPath","cfmPath","modelsPath","modelPath","rootContent","modelsContent","modelContent","rootUri","modelUri","_t3","_context3","fsPath","toLowerCase","replace","window","showErrorMessage","trim","join","mkdirSync","recursive","escapeXml","Date","toISOString","generateFieldsXml","writeFileSync","showInformationMessage","Uri","file","showTextDocument","preview","viewColumn","ViewColumn","Beside","console","error","map","index","fieldId","now","commonAttrs","label","description","required","fieldAttrs","push","placeholder","maxLength","step","numberType","checked","text","options","getWebviewContent","fieldTypes","validationTypes","defaultFields","bgImageUri","fieldTypeOptions","validationTypeOptions","validation","defaultFieldsHtml","optionsValue","escapeHtml","defaultValue","generateFieldHtml","unsafe","toString","updatePreview","webview","postMessage","command","JSON","stringify","module","exports","activate","context","disposable","commands","registerCommand","_ref","_callee2","config","_context2","workspace","getConfiguration","get","createWebviewPanel","enableScripts","retainContextWhenHidden","localResourceRoots","extensionPath","asWebviewUri","html","onDidReceiveMessage","_ref2","_callee","_t","_t2","_context","warn","_x2","subscriptions","onDidDispose","_x","deactivate","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}